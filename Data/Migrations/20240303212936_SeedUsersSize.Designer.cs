// <auto-generated />
using System;
using CheckSkillsASP.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CheckSkillsASP.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240303212936_SeedUsersSize")]
    partial class SeedUsersSize
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CheckSkillsASP.Entity.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("WasCreated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            City = "New York",
                            ConcurrencyStamp = "fd1983ee-7a43-472a-acf7-e94529a2687e",
                            Country = "USA",
                            Email = "johndoe@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NickName = "Johnny",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "JohnDoe",
                            WasCreated = new DateTime(2024, 3, 3, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            City = "London",
                            ConcurrencyStamp = "2ade2636-c6c9-4313-9806-9c7afbc11b35",
                            Country = "UK",
                            Email = "alicesmith@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NickName = "AliSmith",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "AliceSmith",
                            WasCreated = new DateTime(2024, 3, 3, 12, 5, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            City = "Madrid",
                            ConcurrencyStamp = "0c7d4b15-b744-4b35-adba-889a18ca67e3",
                            Country = "Spain",
                            Email = "carlosgomez@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NickName = "GomezC",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "CarlosGomez",
                            WasCreated = new DateTime(2024, 3, 3, 12, 10, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            City = "Tokyo",
                            ConcurrencyStamp = "0100f864-fd6a-48fb-9cc6-f8da91a1ce7a",
                            Country = "Japan",
                            Email = "yukisato@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NickName = "YukiSan",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "YukiSato",
                            WasCreated = new DateTime(2024, 3, 3, 12, 15, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            City = "Prague",
                            ConcurrencyStamp = "18d0e7e3-159e-4bbc-931d-7e96a374fc99",
                            Country = "Czech Republic",
                            Email = "elenakovac@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NickName = "Lena",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "ElenaKovac",
                            WasCreated = new DateTime(2024, 3, 3, 12, 20, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            City = "Cairo",
                            ConcurrencyStamp = "75bd7263-af2e-414a-8173-77db0be081ce",
                            Country = "Egypt",
                            Email = "mohammedali@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NickName = "TheGreatest",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "MohammedAli",
                            WasCreated = new DateTime(2024, 3, 3, 12, 25, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            City = "Paris",
                            ConcurrencyStamp = "eb0ec83d-8a13-4cfe-9201-23b344ab6d7e",
                            Country = "France",
                            Email = "sophiemiller@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NickName = "SophieM",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "SophieMiller",
                            WasCreated = new DateTime(2024, 3, 3, 12, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            City = "Mumbai",
                            ConcurrencyStamp = "90bf1253-3c30-4103-942b-d9473667ec57",
                            Country = "India",
                            Email = "rajpatel@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NickName = "RajP",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "RajPatel",
                            WasCreated = new DateTime(2024, 3, 3, 12, 35, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            City = "Buenos Aires",
                            ConcurrencyStamp = "c23ad7d1-576e-4603-8361-8a2677281ae8",
                            Country = "Argentina",
                            Email = "luisafernandez@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NickName = "LuisaF",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "LuisaFernandez",
                            WasCreated = new DateTime(2024, 3, 3, 12, 40, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            City = "Osaka",
                            ConcurrencyStamp = "0d32c443-5e93-40df-ba0a-130cabde1482",
                            Country = "Japan",
                            Email = "kenjitanaka@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NickName = "KTanaka",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "KenjiTanaka",
                            WasCreated = new DateTime(2024, 3, 3, 12, 45, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            City = "Moscow",
                            ConcurrencyStamp = "35b30ceb-1eed-43a3-8422-b9058fab0d66",
                            Country = "Russia",
                            Email = "anastasiaivanova@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NickName = "AnaIvanova",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "AnastasiaIvanova",
                            WasCreated = new DateTime(2024, 3, 3, 12, 50, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 12,
                            AccessFailedCount = 0,
                            City = "Barcelona",
                            ConcurrencyStamp = "31ff5151-e017-4fba-a8ac-2263971261f1",
                            Country = "Spain",
                            Email = "antoniolopez@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NickName = "TonyLopez",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "AntonioLopez",
                            WasCreated = new DateTime(2024, 3, 3, 12, 55, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 13,
                            AccessFailedCount = 0,
                            City = "Delhi",
                            ConcurrencyStamp = "106fd072-6586-43d5-a725-2eccd128db29",
                            Country = "India",
                            Email = "priyaverma@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NickName = "PriyaV",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "PriyaVerma",
                            WasCreated = new DateTime(2024, 3, 3, 13, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 14,
                            AccessFailedCount = 0,
                            City = "Buenos Aires",
                            ConcurrencyStamp = "05106ece-75e5-4257-861f-7b678445a884",
                            Country = "Argentina",
                            Email = "javierrodriguez@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NickName = "JaviRod",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "JavierRodriguez",
                            WasCreated = new DateTime(2024, 3, 3, 13, 5, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 15,
                            AccessFailedCount = 0,
                            City = "Sydney",
                            ConcurrencyStamp = "055b04fe-7d19-4aad-b47d-09225b0ce284",
                            Country = "Australia",
                            Email = "emilyjohnson@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NickName = "EmJ",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "EmilyJohnson",
                            WasCreated = new DateTime(2024, 3, 3, 13, 10, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 16,
                            AccessFailedCount = 0,
                            City = "Sofia",
                            ConcurrencyStamp = "39f6e686-9f0e-4c9c-ae24-77caf46927a7",
                            Country = "Bulgaria",
                            Email = "ivanivanov@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NickName = "IvanI",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "IvanIvanov",
                            WasCreated = new DateTime(2024, 3, 3, 13, 15, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 17,
                            AccessFailedCount = 0,
                            City = "Mexico City",
                            ConcurrencyStamp = "8f39ac48-c04e-43bc-b5fa-0eb8ca6da611",
                            Country = "Mexico",
                            Email = "sofiamartinez@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NickName = "SofiaM",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "SofiaMartinez",
                            WasCreated = new DateTime(2024, 3, 3, 13, 20, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("CheckSkillsASP.Entity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("CheckSkillsASP.Entity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CheckSkillsASP.Entity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("CheckSkillsASP.Entity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
